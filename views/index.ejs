<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>3D carousel</title>

    <!-- Babylon.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>
    <script src="https://assets.babylonjs.com/generated/Assets.js"></script>
    <script src="https://preview.babylonjs.com/ammo.js"></script>
    <script src="https://preview.babylonjs.com/cannon.js"></script>
    <script src="https://preview.babylonjs.com/Oimo.js"></script>
    <script src="https://preview.babylonjs.com/earcut.min.js"></script>
    <script src="https://preview.babylonjs.com/babylon.js"></script>
    <script src="https://preview.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
    <script src="https://preview.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
    <script src="https://preview.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
    <script src="https://preview.babylonjs.com/loaders/babylonjs.loaders.js"></script>
    <script src="https://preview.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
    <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>
    <script src="https://preview.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>

    <style>
        html,
        body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
</head>

<body>
    <button class="btn btn-primary" id="turnRight">Turn</button>
    <div style="text-align:center; width:1200px; height:300px;">
        <canvas id="renderCanvas"></canvas>
        <script>
            var canvas = document.getElementById("renderCanvas");

            var startRenderLoop = function (engine, canvas) {
                engine.runRenderLoop(function () {
                    if (sceneToRender && sceneToRender.activeCamera) {
                        sceneToRender.render();
                    }
                });
            }

            var engine = null;
            var scene = null;
            var sceneToRender = null;
            var createDefaultEngine = function () { return new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true, disableWebGL2Support: false }); };
            var createScene = function () {
                // This creates a basic Babylon Scene object (non-mesh)
                var scene = new BABYLON.Scene(engine);
                scene.clearColor = new BABYLON.Color3(1, 1, 1)
                var camera = new BABYLON.ArcRotateCamera("camera", BABYLON.Tools.ToRadians(0), BABYLON.Tools.ToRadians(85), 5, BABYLON.Vector3.Zero(), scene);

                // This attaches the camera to the canvas
                camera.attachControl(canvas, true);

                // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
                var light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

                // Default intensity is 1. Let's dim the light a small amount
                light.intensity = 0.7;

                // Our built-in 'ground' shape.
                // var ground = BABYLON.MeshBuilder.CreateGround("ground", { width: 6, height: 6 }, scene);

                /*
                BABYLON.SceneLoader.ImportMesh(
                    undefined,
                    "/../Models/snow-3d-model/",
                    "snow.gltf",
                    scene,
                    function (
                        meshes
                    ) {
                        scene.createDefaultCameraOrLight(true);
                        scene.activeCamera.attachControl(canvas, false);
                    }
                );
                */
                let pi = Math.PI;

                let bear = {
                    path: "public/models/bear/",
                    modelName: "scene.gltf",
                    scaleFactor: 1,
                    initialRotation: pi
                }

                let grasshopper = {
                    path: "public/models/grasshopper/",
                    modelName: "scene.gltf",
                    scaleFactor: 1,
                    initialRotation: 3 * pi / 2
                }

                let hummingbird = {
                    path: "public/models/hummingbird/source/",
                    modelName: "hummingbird.glb",
                    scaleFactor: 10,
                    initialRotation: 3 * pi / 2
                }

                let iguana = {
                    path: "public/models/iguana/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.002,
                    initialRotation: 3 * pi / 2
                }

                let axolotl = {
                    path: "public/models/pet_axolotl/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.15,
                    initialRotation: 3 * pi / 2
                }

                let turtle = {
                    path: "public/models/sea_turtle/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.3,
                    initialRotation: 3 * pi / 2
                }

                let macaw = {
                    path: "public/models/scarlet_macaw/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.002,
                    initialRotation: 3 * pi / 2
                }

                let wolf = {
                    path: "public/models/wolf/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.5,
                    initialRotation: 3 * pi / 2
                }

                let wolf1 = {
                    path: "public/models/wolf1/gltf/",
                    modelName: "scene.glb",
                    scaleFactor: 0.7,
                    initialRotation: 3 * pi / 2
                }

                let prairie_dog = {
                    path: "public/models/prairie_dog/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.0015,
                    initialRotation: pi / 2
                }

                let xoloescuincle = {
                    path: "public/models/xoloescuincle/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.08,
                    initialRotation: 3 * pi / 2
                }

                let quetzal = {
                    path: "public/models/quetzal/",
                    modelName: "scene.gltf",
                    scaleFactor: 0.08,
                    initialRotation: 3 * pi / 2
                }

                let r = 3;


                let models = [];
                models.push(turtle);

                models.push(axolotl);

                models.push(macaw);
                models.push(hummingbird);
                models.push(wolf);
                models.push(xoloescuincle);
                models.push(iguana);
                models.push(prairie_dog);
                models.push(quetzal);
                models.push(bear);
                // let listOfModels = ["ProX_Black.glb", "ProX_Platinum.glb", "Surface_Go_3.glb", "Surface_Laptop.glb", "Surface_Pro_8_Wifi_Graphite.glb", "Surface_Pro_8_Wifi_Platinum.glb"]
                let numberOfModels = models.length;
                // let separationAngle = 2 * pi / numberOfModels;
                for (let i = 0; i < numberOfModels; i++) {
                    let rotationAngle = (2 * pi * i) / numberOfModels;
                    let x = r * Math.cos(rotationAngle);
                    let z = r * Math.sin(rotationAngle);

                    // console.log(listOfModels[i])
                    BABYLON.SceneLoader.ImportMesh("", models[i].path, models[i].modelName, scene, (mesh) => {
                        mesh[0].scaling = new BABYLON.Vector3(models[i].scaleFactor, models[i].scaleFactor, models[i].scaleFactor);
                        mesh[0].rotate(BABYLON.Axis.Y, models[i].initialRotation - rotationAngle, BABYLON.Space.LOCAL);
                        mesh[0].rotate(BABYLON.Axis.X, 0, BABYLON.Space.LOCAL);
                        mesh[0].rotate(BABYLON.Axis.Z, 0, BABYLON.Space.LOCAL);


                        mesh[0].position.x = x;
                        mesh[0].position.z = z;

                        if (numberOfModels - 2 == i) {
                            mesh[0].position.y += 1;
                        }
                    });
                }

                /*BABYLON.SceneLoader.ImportMesh("", "public/models/", "ProX_Black.glb", scene, (mesh) => {
                    mesh[0].scaling = new BABYLON.Vector3(10, 10, 10);
                });*/

                var animCamPosition = new BABYLON.Animation("animCam", "alpha", 10, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

                var keysPosition = [];
                keysPosition.push({
                    frame: 0,
                    value: 0
                });


                keysPosition.push({
                    frame: 300,
                    value: (2 * pi)
                });


                animCamPosition.setKeys(keysPosition);

                camera.animations.push(animCamPosition);


                let myAnim = scene.beginAnimation(camera, 0, 300, true);
                setTimeout(() => { myAnim.pause() }, 0);

                // setTimeout(() => { myAnim.restart() }, 8000);

                return [myAnim, scene];
            };


            let startAnimation = function (scene, myAnim) {
                // let myAnim = scene.beginAnimation(camera, 0, 100, true);
                setTimeout(() => { myAnim.restart() }, 0);
                setTimeout(() => { myAnim.pause() }, 2300);
            };

            window.initFunction = async function () {

                var asyncEngineCreation = async function () {
                    try {
                        return createDefaultEngine();
                    } catch (e) {
                        console.log("the available createEngine function failed. Creating the default engine instead");
                        return createDefaultEngine();
                    }
                }


                window.engine = await asyncEngineCreation();
                if (!engine) throw 'engine should not be null.';
                startRenderLoop(engine, canvas);


                let [myAnim, scene] = createScene();
                document.getElementById('turnRight').addEventListener('click', () => { startAnimation(scene, myAnim) });
                window.scene = scene;

            };

            // document.getElementById('turnRight').addEventListener('click', startAnimation(window.scene));

            initFunction().then(() => {
                sceneToRender = scene
            });

            // Resize
            window.addEventListener("resize", function () {
                engine.resize();
            });
        </script>
    </div>


</body>

</html>